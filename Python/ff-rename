#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# still have many lines > 85 width (needs fixing)
"""ff-rename file renamer with many options."""
from __future__ import print_function       # for python 2
import os
from sys import argv, exit, stderr
from optparse import OptionParser
import os.path
from magoo.logtools import check_logging_args_optparse
from magoo.logtools import logging, remove_logfile
from magoo.proctools import os_which, os_popen  # , os_killpid
# from re import search
# python2 uses deprecated replace, import replace for python3 compatability
# already imported print_function from __future__
# python3 replace() is a method of <class 'str'> and built-in
from sys import version_info
from time import sleep
if version_info[0] < 3:
    # from string import replace
    pass


'''
Author: Matt Weber
Changes: Magoo

Date:   03/04/07

Renames files based on the input args.
04/10/15 - Updated for Python 3, added --exec flag
04/11/15 - Added chrCleanFilename() for media files
04/12/15 - Added strCleanFilename() for video media files
04/19/15 - Added videoNameFixer() for video media files
04/20/15 - Added logging stuff
04/21/15 - Added filename class
04/22/15 - Added strFixAcronyms
04/26/15 - Recode videoNameFixer
04/28/15 - Added re.search to find season/episode#
04/07/15 - Added append/prepend features
05/09/15 - Added Program class
05/30/15 - Added insert flag & code
07/28/15 - Added rename directory code
10/25/15 - Added xterm tail logging
12/25/15 - Added code to remove [[ec]ttv] from names
2016-02-08 - changed ff-tail to yad shell version
2016-04-20 - changed loggit & proccit to magoo_tools
2016-04-20 - modified code to use new features of proccit
linted with atom/flake8 2016-01-09
'''


class Program:
    """this class holds common program info for this program."""

    def __init__(self):
        """Store important program info here."""
        self.cmdName = os.path.basename(argv[0])  # my cmdname (no path)
        self.logFile = '/tmp/' + self.cmdName + '.log'  # my log filename
        self.xTailGeom = "60x6-50+50"		# taillog xterm geometry
        self.fftailCmd = ""					# path to our ff-tail cmd
        self.xTailPid = 0					# store debug window pid
        self.defLogLevel = 20				# default log level (INFO)
        self.version = "v0.2.0"				#
        self.lastEdit = "2016-01-23"        #
        self.lintStatus = True              #
        self.args = ""					    # command args
        self.largs = ""					    # command args
        self.titleFlag = False              # __future__ must go at front file ??
        self.tailCmd = "ff-tail"            # xterm, mate-terminal, ff-tail


class Filename:
    """this class holds filename info for current file."""

    def __init__(self, filename):
        """Store important program info here."""
        self.filename = filename.lower()		# lower case it
        split = self.filename.rsplit('.', 1)		# reverse split extent
        self.name = split[0]				# name = 1st half
        self.ext = split[1] if len(split) == 2 else ''  # .ext = back half (if both chunks)
        self.S__E__ = ""				# get this by using re.search
        self.showname = ""				# whatever is in front of S__E__
        self.x = []					# above split into words
        self.epiname = ""				# after S__E__ before .ext
        self.y = []					# above split into words
        # self.let = self.name.translate(ALL, NUM)
        # self.num = self.name.translate(ALL, LET)

    def __eq__(self, other):
        """Boolean compare for 2 left=right Filenames."""
        return bool(self.num) and other == int(self.num)


# realize my class
p = Program()


def main():
    """Our program starts executing here."""
    global p
    #
    # basic optparse skeleton documentation
    # web=https://code.google.com/p/optparse/
    #
    # create the options we want to parse
    #
    usage = "usage: %prog [args] <file(s)>"
    optParser = OptionParser(usage=usage)
    optParser.add_option(
        "-v",
        "--verbose",
        action="store_true",
        dest="verbose",
        default=False,
        help="Use verbose output"
    )
    optParser.add_option(
        "-l",
        "--lowercase",
        action="store_true",
        dest="lowercase",
        default=False,
        help="Convert the filename to lowercase"
    )
    optParser.add_option(
        "-f",
        "--trim-front",
        type="int",
        dest="trimfront",
        metavar="NUM",
        help="Trims NUM of characters from the front of the filename"
    )
    optParser.add_option(
        "-p",
        "--prepend",
        action="store",
        type="string",
        dest="prepend",
        metavar="STR",
        help="Prepend STR to the front of the filename",
        nargs=1,
        default=""
    )
    optParser.add_option(
        "-b",
        "--trim-back",
        type="int",
        dest="trimback",
        metavar="NUM",
        help="Trims NUM of characters from the back of the filename"
    )
    optParser.add_option(
        "-a",
        "--append",
        action="store",
        type="string",
        dest="append",
        metavar="STR",
        help="Append STR to the rear of the filename",
        nargs=1,
        default=""
    )
    optParser.add_option(
        "-i",
        "--insert",
        action="store",
        type="string",
        dest="insert",
        metavar="STR POSN",
        help="Insert STR at POSN in filename",
        nargs=2,
        default=""
    )
    optParser.add_option(
        "-r",
        "--replace",
        action="append",
        type="string",
        nargs=2,
        dest="replace",
        help="Replaces OLDVAL with NEWVAL in the filename",
        metavar="OLDVAL NEWVAL"
    )
    optParser.add_option(
        "-m",
        "--mediaclean",
        action="store_true",
        dest="mediaclean",
        default=False,
        help="Remove and Replace chars unsuitable for media files"
    )
    optParser.add_option(
        "-s",
        "--mediastring",
        action="store_true",
        dest="mediastring",
        default=False,
        help="Remove strings unsuitable for media files"
    )
    optParser.add_option(
        "-e",
        "--exec",
        action="store_true",
        dest="execFlag",
        default=False,
        help="Actually do the file renames"
    )
    optParser.add_option(
        "-L",
        "--logging",
        action="store",
        type="string",
        nargs=1,
        dest="logging",
        help="loglevel=DEBUG|INFO|WARNING|ERROR|CRITICAL",
        metavar="loglevel",
        default='20'
    )
    optParser.add_option(
        "-F",
        "--logfile",
        action="store_true",
        dest="logfile",
        default=False,
        help="log to "+p.logFile+" instead of the screen"
    )
    optParser.add_option(
        "-T",
        "--taillog",
        action="store_true",
        dest="taillog",
        default=False,
        help="Tail the log file to a window"
    )
    #
    # split options and non options into args, largs
    # args = optParser.parse_args() just parses args
    # non-args generate an error
    #
    (p.args, p.largs) = optParser.parse_args()

    remove_logfile(p.logFile)		# From loggit - remove previous log

    if p.args.taillog:
        p.args.logfile = True			# set logfile true if tailing log
        p.args.logging = '10'			# debug logging
        # magoo/logtools
        check_logging_args_optparse(p.args, p.logFile, p.args.logfile)
        xTail()					        # create xtail window
    else:
        check_logging_args_optparse(p.args, p.logFile, p.args.logfile)

    logging.debug('log level=' + str(p.args.logging))
    logging.debug('logfile=' + ('False', 'True')[p.args.logfile])
    logging.debug('taillog=' + ('False', 'True')[p.args.taillog])
    logging.debug('execFlag=' + ('False', 'True')[p.args.execFlag])

    # check that they passed in at least one file to rename
    if len(p.largs) < 1:
        optParser.error("NO Filename(s) to rename specified")

    # logging.info(str(p.largs))
    # loop though the files and rename them
    for filename in p.largs:
        # trim the URI header off
        # passed in by Drag N Drop
        if 'file://' in filename:
            filename = filename[len('file://'):]
            logging.debug('Cut file:// from URI:head')

        # NEW (not valid idea ?)
        # if "'" in filename:
        # filename = filename.replace("'", "\\'")	# escape any ' in filename
        # logging.debug('Escaping apostrophe in '+filename)

        # directory S01.TV (xxxx) -> S01.TV-[xxxx]
        if os.path.isdir(filename):
            old_name = filename
            filename = filename.replace(' (', '-[')
            filename = filename.replace(')', ']')
            os.rename(old_name, filename)
            logging.debug('Dir rename='+old_name+' -> '+filename)
        else:
            logging.debug('calling RenameFile('+filename+')')
            # logging.debug('with args='+str(p.args))
            RenameFile(p.args, filename)

    # exit successful
    if p.args.taillog and p.xTailPid != 0:
        # os_killpid(p.xTailPid, signal=15)
        '''
        # killCmd = "/bin/kill %s" % p.xTailPid
        # from subprocess import call
        # call(killCmd, shell=True, executable='/bin/bash')
        # os.popen("/bin/kill -9 "+p.xTailPid)
        # remove_logfile(p.logFile)
        '''
    exit(0)


def RenameFile(args, filepath):
    """Renames a file with the given args options."""
    global p

    # split the pathname and filename
    pathname = os.path.dirname(filepath)
    filename = os.path.basename(filepath)

    # trim characters from the front
    if p.args.trimfront:
        filename = filename[p.args.trimfront:]

    # prepend string to the filename
    if p.args.prepend != "":
        filename = p.args.prepend + filename

    # trim characters from the back
    if p.args.trimback:
        filename = filename[:len(filename) - p.args.trimback]

    # append string to the filename
    if p.args.append != "":
        filename = filename + p.args.append

    # insert string value at posn value
    if p.args.insert:
        iStr = p.args.insert[0]				# string from tuple
        iPosn = p.args.insert[1]			# index from tuple
        # iStr, iPosn = (p.args.insert)			# get string and index
        temp = (filename[0:int(iPosn)],
            filename[int(iPosn):-1])  # split filename at index posn
        filename = \
            temp[0] + iStr + temp[1]  # re-assemble with str insert

    # replace values if any (more than 1 -r "" "" allowed)
    if p.args.replace:
        for vals in p.args.replace:
            filename = filename.replace(vals[0], vals[1])

    # convert to lowercase if flag set
    if p.args.lowercase:
        filename = filename.lower()

    if p.args.mediastring:
        (fileBaseName, fileExtension) = os.path.splitext(filename)
        # fileBaseName = chrCleanFilename(fileBaseName)  # +fileExtension
        fileBaseName = strCleanFilename(fileBaseName)  # +fileExtension
        fileBaseName = videoNameFixer(fileBaseName)  # +fileExtension
        filename = strFixAcronyms(fileBaseName) + fileExtension

    if p.args.mediaclean:
        (fileBaseName, fileExtension) = os.path.splitext(filename)
        filename = chrCleanFilename(fileBaseName)+fileExtension

    # create the new pathname and rename the file
    new_filepath = os.path.join(pathname, filename)
    try:
        # check for verbose output
        tmpPrnt = "%s -> %s" % (filepath, new_filepath)
        if p.args.verbose or not p.args.execFlag:
            print(tmpPrnt)
            logging.debug('Rename '+tmpPrnt)

        if p.args.execFlag:
            os.rename(filepath, new_filepath)
            logging.debug('Rename '+tmpPrnt+' Done')
    #
    # Cheat Sheet: Writing Python 2-3 compatible code
    #   http://python-future.org/compatible_idioms.html#raising-exceptions
    #
    except OSError as err:
        print("Error renaming '%s': %s" % (filepath, err), file=stderr)
        '''# python2
        if version_info[0] < 3:
            print >>sys.stderr, "Error renaming '%s': %s"  % (filepath, err.strerror)
        # python3
        else:
            print("Error renaming '%s': %s" % (filepath, err), file=stderr)
        '''


#
# open a window with a tail of the logfile in it
#
def xTail():
    """Open a ff-tail window and tail the logfile - for debugging."""
    global p

    #
    # create the file if it doesnt exist
    # truncate the file if it does exist
    #
    open(p.logFile, 'wb').close()

    if not p.fftailCmd:
        p.ffTailCmd = os_which('ff-tail')

    # format command to create logtail window
    tailCmd = "{} -n 50 -f {} &".format(p.ffTailCmd, p.logFile)
    # create the window and get/save its process id
    p.xTailPid = os_popen(tailCmd, shell=False, wait=False, ret_type='pid')
    sleep(.5)
    logging.debug('tailLogPid='+str(p.xTailPid))
    return
    '''
    method two - use a xterm for tail
    requires importing subprocess

    # build xterm command string for tail
    xtermCmd =\
        "xterm -title \"%s : logtail : %s\" -geometry %s -sb"\
        + "+hold -e \"tail -n 100 -f %s\"&" % \
        (p.cmdName, p.logFile, p.xTailGeom, p.logFile)

    # subP = subprocess.call(xtermCmd, shell = True,
    # executable='/bin/bash')		# xterm
    '''

    '''
    # procName = "logtail"

    # pid_list = psutil.get_pid_list()
    # print(pid_list)
    # p = psutil.Process(10356)
    # print(p.name)
    # for i in pid_list:
        # p = psutil.Process(i)
        # p_name = p.name
        # print (str(i)+" "+str(p.name))
        # if p_name == "logtail":
            # print("*"*20+" mam ho "+"*"*20)
            # p.kill()
        # for proc in psutil.process_iter():
            #  if proc.name() == procName:
                #      #proc.kill()
                #      print proc.name, proc.pid
                # subInfo = psutil.Process(subP.pid)
                # subP.terminate
    '''


def chrCleanFilename(name):
    """clean and replace some in appropriate chars from name."""
    #
    # use translate - more pythonic
    #
    chg__in = "(){} *.&"		# chg these
    chg_out = "[][]___+"		# to these
    lose_em = " ',!;~"		    # lose these
    trans = str.maketrans(chg__in, chg_out, lose_em)

    return (name.translate(trans))
    '''
    # previous method
    bad=(["'",""],[",",""],["(","["],[")","]"],\
        ["{","["],["}","]"],["!",""],[";",""],\
        ["~",""],[" ","_"],['*','_'],['&','+'],\
        [".","_"])

    new = name
    for c, rc in bad:
        new = new.replace(c, rc)	# lose or replace

    return(new)
    '''


# def clean_strings(self):
def strCleanFilename(name):
    """Remove internet download words from self.filename."""
    """called after the filename is copied and lowered()"""

    # 'com' is way to common - figure another way to clean
    remove = [
        'hdtv', 'x264', 'killers', 'asap', '[ettv]', '[rartv]', 'lol',
        'fov', '[eztv]', '[rarbg]', 'crimson', 'fum', 'batv', 'w4f',
        'xvid', 'internal', 'rarbg', 'immerse', 'dimension', '720p',
        '480p', 'msd', 'river', 'bajskorv', 'proper', 'repack', 'webrip',
        '2hd', 'web', 'dl', 'aac2.0', 'h264', 'btn', 'failed', 'yestv',
        'jive', 'convert', 'xclusive', 'fihtv', 'hevc', 'x265', 'tastetv',
        'organic', 'mtg', 'xvid', 'chamee', 'afg', 'sneaky', 'www',
        'tfpdl', 'com', 'nfo', '[vtv]', 'pdtvx264', 'pdtv', 'river',
        'situs', 'medorc', 'pdtv', '[gwc]', 'e-Subs', 'aac', 'ze', 'tla',
        'crooks', 'rb58', 'wnn', 'itv', 'eng', 'subs', 'pftv', 'c4tv',
        'alterego', 'spamtv', 'hero', 'fleet', '[cttv]', 'hulu', 'skgtv',
        'deadpool', 'deflate',
    ]
    # logging.info('in='+name)
    new = name.lower()
    if '[ettv]' in new or '[cttv]' or '[rartv]' in new:
        new = new.replace('[', '-[')		# spcl case-[[ec]ttv] prepend -
    for s in remove:				        # for every word in list
        for p in ('.', '-', '_', '~'):		# for each .-_~<sp>
            t = p+s					        # prepend p to s
            if t in new:
                new = new.replace(t, '')    # replace with ''
                continue				    # and continue to next test
        if '..' in new:
            new = new.replace('..', '.')    # spcl case-2 dots together

    return(new.title())


'''
def strCleanFilename(name) :
  ""
  clean and replace some in appropriate strings from name
  ""
  remove = (	# internet TV video download words
    '.hdtv','.x264','_x264','x264','-killers','-asap','[ettv]',
    '[rartv]','-lol','-fov','[eztv]','[rarbg]','-crimson',
    '-fum','-batv','-w4f','.XviD','.internal','-rarbg','-lo',
    '-immerse','-dimension','-XviD','.720p','.480p','-mSD',
    '-river','-bajskorv','.proper','.repack','.WebRip','~Ze',
    '.webrip','-2hd','.web-dl','aac2.0','.h.264','-btn',
    '-FailED','-YesTV','-jive','.convert','.Xclusive','-FiHTV',
    '.hevc','.x265','-tastetv','-organic','-ORGANiC','-mtg',
    '.xvid','-ChameE','.WEBRip','-afg','-SNEAkY','-480p',
    'www.tfpdl.com-','.nfo','.[vtv]','Pdtv','-River','~situs',
    '-medorc','.Repack','[GWC]','E-Subs','aac','_Hdtv')

  new = name
  for s in remove:		# for every word in list
    if s in new:		# if found in list
      new = new.replace(s, '')	# replace with ''
    S = s.upper()		# also check after ucase
    if S in new:		# and found in list
      new = new.replace(S, '')	# replace with ''

  if '..' in new:
    new = new.replace('..', '.')	# special case - 2 dots together

  return(new)
'''


#
# Capitalize Names, Repair Episodes etc
#   first word and first word after season stay caps
#   the, and, of, a stay uncapped unless first word
#
def videoNameFixer(name):
    """Capitalize Names, Repair Episodes etc."""
    logging.debug('VNF-in='+name)
    new = name.title()				# get the first letter of words
    new = new.replace('.', '_')			# all periods now underscore
    new = new.replace(' ', '_')			# all spaces now underscore
    words = new.split('_')			# now an array of words
    toLowOK = False				# lower() of A,The,Of,And OKAY
    seriesPart = False				# in the front part
    new = ""					# start fresh
    wc = 0					# word counter
    for w in words:				# for each word
        # first word of showname or already SxxExx season/episode name
        # isalpha gets words - isdigit gets 0-10 and (begin w S - len=6 ... gets SxxExx
        logging.debug('for-top-word='+w)
        # T0
        if not wc:					# first word
            if w.isalpha() or w[0].isdigit() or (w[0] == 'S' and len(w) == 6 and w[-1].isdigit()):
                if w[1:3].isdigit() and w[4:6].isdigit():  # uppercase the e in S00E00
                    w[3].upper()
                new = w		 # word added
                toLowOK = True   # (this part just once - Set toLowOK = True - see wc)		# ADDADD
                logging.debug('T0 w-i='+w+' w-o='+w+' wc='+str(wc)+' w-l='+str(len(w)))		# 012345
                wc += 1
                continue
        #
        # if loop finds seriesPart=True and toLowOK=False at same time
        #   - it should keep w and then set toLowOK to True
        #
        # names are in 3 parts
        #   show title / Season # Episode # / episode title
        #          NCIS.S10E12.The Evil and the One
        # only the,and,a,of are Caps if the 1st word of 1st or 3rd parts
        #
        # T1
        # if (the, and, of, a)
        if w in ('The', 'And', 'Of') or ('A' in w and len(w) == 1):
            # if not 1st or after Episode 1st
            if toLowOK or (seriesPart and toLowOK):
                nw = w.lower()  # lower added
            else:
                nw = w		# keep same
            new += '_'+nw
            logging.debug('T1 w-i='+w+' w-o='+nw+' wc='+str(wc)+' w-l='+str(len(w)))
            wc += 1
            if seriesPart and not toLowOK:  # in Part3, Keep Caps - reset toLowOK = True
                toLowOK = True
            continue
        # T2
        elif w.isalpha():				# word add and keep going
            nw = w
            new += '_'+nw
            logging.debug('T2 w-i='+w+' w-o='+nw+' wc='+str(wc)+' w-l='+str(len(w)))
            wc += 1
            if seriesPart and not toLowOK:
                toLowOK = True
            continue
        # T3
        elif w.isdigit():  # and lw >= 3 and lw <= 4 :	# season num is SEE
            lw = len(w)
            if lw <= 2 or lw >= 5:				# not date or SEE or SSEE
                nw = w
                new += '_'+nw
                wc += 1						# add and continue
                logging.debug('T3-0 w-i='+w+' w-o='+nw+' wc='+str(wc)+' w-l='+str(len(w)))
                continue
            nn = ['', '']
            if lw == 3:
                nn = (w[0:1], w[1:3])				# assign value based on len
            elif lw == 4:
                nn = (w[0:2], w[2:4])
                yr = int(nn[1])
                if nn[0] == '20' and yr >= 10 and yr <= 20:	 # yr is 20xx (test)
                    nw = nn[0]+nn[1]
                    new += '_'+nw
                    wc += 1
                    continue
                    logging.debug('T3-1 w-i='+w+' w-o='+nw+' wc='+str(wc)+' w-l='+str(len(w)))
            #
            # fall thru (Failed Tosh.0)
            # fill in with zeros + numbers
            nw = 'S{:02d}E{:02d}'.format(int(nn[0]), int(nn[1]))
            # nw = 'S0'+w[0:1]+'E'+w[1:3]
            # logging.info('T3-2 word='+w)
            new += '_'+nw
            seriesPart = True
            toLowOK = False
            logging.debug('T3-2 w-i='+w+' w-o='+nw+' wc='+str(wc)+' w-l='+str(len(w)))
            wc += 1
            continue
            # T4
        elif w.isalnum() and 'x' in w.lower():  # season is 1x1, 1x00, 11x00
            # logging.info('T4 w='+w)
            nn = w.lower().split('x')			# break into 2 parts
            # fill in with zeros + numbers
            nw = 'S{:02d}E{:02d}'.format(int(nn[0]), int(nn[1]))
            new += '_'+nw				# add to the out string
            seriesPart = True
            toLowOK = False
            logging.debug('T4 w-i='+w+' w-o='+nw+' wc='+str(wc)+' w-l='+str(len(w)))
            wc += 1
            continue
        # T5
        elif w.isalnum() and len(w) == 6:		# season is SxxExx
            nw = 'S'+w[1:3]+'E'+w[4:6]
            new += '_'+nw
            seriesPart = True
            toLowOK = False
            logging.debug('T5 w-i='+w+' w-o='+nw+' wc='+str(wc)+' w-l='+str(len(w)))
            wc += 1
            continue

        # end  of loop - if tests above don't hit and continue - add the word
        if w != "":
            nw = w
            if not wc:
                new = nw  # if word 0 - and we get here - dont add underscore
            else:
                new += '_' + nw			# else do
        logging.debug('T6 w-i='+w+' w-o='+nw+' wc='+str(wc)+' w-l='+str(len(w)))
        wc += 1
        if seriesPart and not toLowOK:
            toLowOK = True
    return(new)


def strFixAcronyms(name):
    """find acros and fix (ucase), find long names and abbr (shorten)."""
    # lookup and change Dict
    Acros = {
        'csi': 'CSI', 'ncis': 'NCIS', 'svu': 'SVU', 'us': 'US',
        'ddd': 'DDD', 'w1a': 'W1A', 'usa': 'USA', 'pd': 'PD',
        'lao': 'LAO', 'bbq': 'BBQ', 'snl': 'SNL',
    }
    Abbrevs = {
        'Law_and_Order': 'LAO', 'Saturday_Night_Live': 'SNL',
        'New_Orleans': 'NO', 'Los_Angeles': 'LA', 'Law_&_Order': 'LAO'
    }
    words = name.split('_')
    repl = ""
    for w in words:			# for each of my words
        try:
            repl = Acros[w.lower()]		# lookup replacement
            name = name.replace(w, repl)  # found - replace
            logging.debug('repl='+repl)
        except:
            pass				# else - do nothing

    for i in Abbrevs:			# for each abbrev in Dict
        if i in name:			# if long name found
            repl = Abbrevs[i]			# lookup replacement
            name = name.replace(i, repl)  # found - replace (abbrev)

    return (name)


if __name__ == "__main__":
    main()
