#!/usr/bin/env python3
"""ff-dropper - onscreen yad-based drag&drop target for multiple cmds."""
# -*- mode: python -*-
# -*- coding: utf-8 -*-
from sys import argv, exit
import os.path
import argparse
from magoo.logtools import check_logging_args_argparse, logging
from magoo.proctools import os_call
# from magoo.proctools import os_notify
from yad import YAD

"""
put a yad drag&drop window on the screen - items dropped are processed by
the current -cmd=<string>.  Default is ff-cleaner.  others can be specified
on the commandline.

atom linter-flake8 add to Atom stuff:
  http://www.marinamele.com/install-and-configure-atom-editor-for-python

2016-01-09 - program linted by atom/flake8/pep8
2016-02-08 - changed yad buttons to use ff-tail -n 50 -f (yad version)
2016-03-01 - Changed ff-enc log button filename to remove '.sh' from name
2016-03-01 - Added wget command to command table (download to ~/Desktop/wget)
2016-04-08 - Added ff-fbrename to command table (filebot rename file)
2016-04-21 - update code for magoo_tools
2016-10-12 - fix long lines and use str.format commands (not %)
2016-10-21 - add entry in lookup table for ff-view
2016-10-22 - fix some more strings to use format, add choices to argparse
2016-10-22 - added class function buildCmndsAll for argparse --command
2016-10-29 - changed default drop command to ff-cleaner
2016-11-07 - added pick command function --pickFlag, -pf on cmd-line
"""


class Program:
    """this class holds common program values for this program."""

    def __init__(self):
        """Store important program info here."""
        self.cmdName = os.path.basename(argv[0])  # save cmd name (no path)
        self.logFile = '/tmp/{}.log'.format(self.cmdName)  # my log fname
        self.defLogLevel = 20           # default log level (INFO)
        self.version = "v0.2.1"
        self.lastEdit = "2016-11-07"
        self.lintStatus = True
        self.title = "ff-dropper"       # default title
        self.icon = ""                  # launcher icon
        self.image = ""                 # imager dropper window
        self.text = ""                  # tooltip text
        self.button = "View-Log!cab_view!Tail-Log"  # my log view button
        # set my path in env
        self.PATH = ':'.join([
            "/home/magoo/.bin",
            "/usr/local/bin",
            "/usr/bin",
            "/bin"])
        self.args = ""                  # command flags
        # build cmnds string for next argparse
        self.cmndsStr = ''
        self.defCmdName = 'ff-cleaner'
        self.defCmdStr = 'ff-cleaner -ll 10 -lf -ex'
        self.cmnds = {
            'ff-copy2': 'ff-drop-sh -D',       # modify video files
            'ff-cropsize': 'ff-cropsize',   # rsz, crop and perf->folder.jpg
            'ff-cleaner': 'ff-cleaner -ll 10 -lf -ex',    # rename video file
            'ff-enc': 'ff-drop-sh -D enc',  # transcode video files
            'ff-fbrename': 'ff-fbrename',       # filebot rename file
            'ff-fetch-omdb': 'ff-fetch-omdb',   # fetch json data from omdbapi
            'ff-info': 'ff-info -of',       # detailed file info
            'ff-rename': 'ff-rename -L 10 -F -s -e',  # rename video file
            'ff-size': 'ff-size -of',       # less detailed, all files in dir
            'ff-title': 'ff-size -mt -of',  # show ff-size metadata all files
            'ff-view': 'ff-view',           # view files that are dopped
            'ff-wget': 'wget -O /home/magoo/Desktop/wget/raw.jpg',  # wget jpg
        }
        # removed commands
        # 'ff-grok': 'ff-grok',self.cmndsAll       # show ff-enc space savings
        # 'ff-stdout': 'yad --list --column=DND',  # show args onscreen
        self.cmndsAll = ''
        self.pickOpts = []
        #
        # we just need the icon name if icon.svg
        # is located in /usr/share/icons/hicolor and
        # gtk-update-icon-cache /usr/share/icons/hicolor
        # is run to update the cache (full path works too)
        #
        self.images = {
            'ff-enc': 'FFmpeg',
            'ff-copy2': 'FFmpeg',
            'ff-rename': 'pyrenamer',
            'ff-cleaner': 'pyrenamer',
            'ff-fbrename': 'pyrenamer',
            'ff-cropsize': 'gtk-zoom-fit',
            'ff-view': 'cab_view'
        }

    # build string of all commands in self.cmnds dict for help info
    def buildCmndsAll(self):
        for key, value in self.cmnds.items():
            self.cmndsAll += (key, ', {}'.format(key))[self.cmndsAll != '']

    def pick(self):
        """display dropper choices in a yad list dialog."""
        for key, value in self.cmnds.items():
            if key == 'ff-cleaner':         # default is ff-cleaner
                key = '^{}'.format(key)
            self.pickOpts.append(key)
        formFlds = (				        # my form CB field
            ("CB", 'Commands', (self.pickOpts)),
        )
        # returns a dict
        # {0: 'string', 'rc': 0}
        # or None
        x = YAD().Form(
            fields=formFlds,
            title=p.cmdName,
            text='Select',
            image='cab_view',
            geometry='-25+25',
            ontop=True,
            button0='Okay!gtk-ok!Okay:0',
            button1='Quit!gtk-quit!Cancel:1',
            tooltip=True,
        )
        # if valid selection from user
        # exec ff-dropper with that selection
        if x is not None:
            cmdStr = '{} -cmd={} &'.format(
                p.cmdName,          # ff-dropper
                x[0])               # our pick
            os_call(cmdStr)         # re-execute with pick
            return

        '''these entries replaced by ff-copy2s gui picking function:
            'ff-copy2as': 'ff-drop-sh copy2as',  # audio shrink
            'ff-copy2vs': 'ff-drop-sh copy2vs',  # video shrink
            'ff-copy2cc': 'ff-drop-sh copy2cc',  # change copy
            'ff-copy2vo': 'ff-drop-sh copy2vo',	 # change volume
            'ff-copy2tc': 'ff-drop-sh copy2tc',	 # title copy
        '''


"""create program class."""
p = Program()


def main():
    """Main Function - program entry point."""
    global p

    #
    # set up my command line arguments
    #
    p.buildCmndsAll()
    parser = argparse.ArgumentParser(
        prog=p.cmdName,
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description='Drag&Drop window for various utilities',
        epilog='{} {} {}'.format(p.cmdName, p.version, p.lastEdit)
    )
    parser.add_argument(
        '--logging',
        '-ll',
        required=False,
        type=str,
        default='INFO',
        metavar='',
        choices=[
            '10', '20', '30', '40', '50',
            'DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL',
            'debug', 'info', 'warning', 'error', 'critical'
        ],
        help='-ll = DEBUG | INFO | WARNING | ERROR | CRITICAL'
    )
    parser.add_argument(
        '--logfile',
        '-lf',
        action='store_true',
        default=False,
        required=False,
        help='log to {} instead of the screen'.format(p.logFile)
    )
    parser.add_argument(
        '--command',
        '-cmd',
        required=False,
        type=str,
        default='ff-cleaner -ll 10 -lf -ex',
        metavar='',
        help='command=({})'.format(p.cmndsAll)
    )
    parser.add_argument(
        '--string',
        '-str',
        required=False,
        type=str,
        default='',
        metavar='',
        help='your custom command string'
    )
    parser.add_argument(
        '--pickFlag',
        '-pf',
        action='store_true',
        required=False,
        default=False,
        help='choose the {} command from a yad dialog'.format(p.cmdName)
    )
    # default is no-buttons = True, setting it to False exposes
    # the YAD tail button
    parser.add_argument(
        '--tailButton',
        '-tb',
        action='store_false',
        required=False,
        default=True,
        help='add tailview button to dialog'
    )

    #
    # split options and non options into args, largs
    # args = parser.parse_args() just parses args - nonargs generate an error
    #
    p.args, p.largs = parser.parse_known_args()
    # get loglevel and start logging
    check_logging_args_argparse(p.args, p.args.logfile)

    # establish my path
    os.environ['PATH'] = p.PATH
    # myPATH = os.environ['PATH']
    # print(myPATH)

    logging.debug('log level={}'.format(str(p.defLogLevel)))
    logging.debug('log2file={}'.format(('False', 'True')[p.args.logfile]))
    logging.debug('pickFlag={}'.format(('False', 'True')[p.args.pickFlag]))
    logging.debug('args=({})'.format(str(p.args)))

    # --pickFlag
    # exec ff-dropper with user pick
    if p.args.pickFlag:
        p.pick()
        exit(0)

    # this code sets the dropper title and command from user CLI input
    # if a custom command string on CLI with --string flag
    # then set the command to that string
    if p.args.string:
        p.args.command = p.args.string
        p.title = p.args.string.split(' ', 1)[0]    # word 1 from string
        # p.title = p.args.string.partition(' ')[0]	 # alternative method
    # special case for default ff-cleaner
    elif p.defCmdName in p.args.command:
        p.title = p.defCmdName				          # title is ff-cleaner
        p.args.command = p.defCmdStr                  # cmd is ff-cleaner
    # else get/lookup the command, set title to head of the command
    else:
        # get/lookup the command from the commands dict
        # default command is ff-cleaner (if no command specified)
        p.args.command = \
            p.cmnds.get(p.args.command, p.defCmdStr)
        # NEW CODE
        if 'ff-drop' in p.args.command:         # if ff-drop
            if 'enc' in p.args.command:         # and ff-enc
                p.title = 'ff-enc'              # then ff-enc title
            else:
                p.title = 'ff-copy2'            # else ff-copy2 title
        else:
            # NEW CODE
            # else title is first word of command string
            p.title = p.args.command.split(' ', 1)[0]   # word 1 from cmd

    # loop here until user closes program
    while True:
        #
        # this is an interesting goodie - if I set command to something
        # DND will execute it directly - no button push needed
        # the URI header: 'file://' that is prepended to the name
        #  needs to be stripped off the by the receiving application
        #
        # if the command isnt set then the app returns the URI string
        # when the user pushes OKAY button then we can strip and call
        # some commands ourselves (we dont display an OKAY button)
        #
        p.text = 'Drag&Drop to {}'.format(p.title)
        # try:
        #  p.image = p.icon = p.images[p.title]
        # lookup icons/images for commands
        # except:
        #  p.image = p.icon = ""
        if 'ff-copy2' in p.title:
            p.image = p.icon = p.images.get('ff-copy2', "")	 # get FFmpeg icon
        else:
            p.image = p.icon = p.images.get(p.title, "")  # or lookup by title
        logging.debug('icon=image{}'.format(str(p.icon)))
        # os_notify('image={}'.format(p.image))

        #
        # set the text,icon,tooltip,command and
        #  logfile name for the tailview button
        #
        if p.title == 'ff-rename':
            lfName = 'ff-rename.log'
        elif p.title == 'ff-cleaner':
            lfName = 'ff-cleaner.log'
        elif p.title == 'ff-enc':
            lfName = 'ff-enc-pass.log'
        else:
            lfName = 'ff-copy2.log'
        # build the button arg string
        if p.title in ('ff-enc', 'ff-rename', 'ff-copy2', 'ff-cleaner'):
            p.args.tailButton = False
            buttonArg = '{}!{}!{}:{}{}'.format(
                'View-Log',                 # button text
                'cabview',                  # button icon
                'Tail-the-Log',             # tooltip text
                'ff-tail -n 50 -f /tmp/',   # command string
                lfName                      # and filename
            )
        else:
            buttonArg = p.button
        logging.debug('title={}'.format(p.title))
        logging.debug('text={}'.format(p.text))
        logging.debug('button={}'.format(buttonArg))
        logging.debug('tailbutton={}'.format(
            ('False', 'True')[p.args.tailButton]))
        logging.debug('cmdStr={}'.format(p.args.command))
        #
        # if tailButton (reverse logic)
        # we display an image in the dialog
        #
        if p.args.tailButton is True:
            x = YAD().DND(
                title=p.title,              # dialog title
                command=p.args.command,		# cmd to run on drag and drop
                text=p.text,                # tooltip text
                geometry="180x40-25+25",    # window geometry
                image=p.image,				# window image-makes window bigger
                window_icon=p.icon,			# launcher icon
                tooltip=True,               # display tooltip on rollovers
                undecorated=False,			# False - no titlebar or buttons
                on_top=True,                # place window on top of others
                no_buttons=p.args.tailButton,  # no dialog buttons
                button=buttonArg,			# view log btn for each cmd
                separator=' ',				# separator
            )
        #
        # we drop the image and display
        # the logview button (ff-tail)
        #
        else:
            x = YAD().DND(
                title=p.title,                 # dialog title
                command=p.args.command,        # cmd to run on drag and drop
                text=p.text,                   # tooltip text
                geometry="180x40-25+25",	   # window geometry
                window_icon=p.icon,            # launcher icon
                tooltip=True,                  # display tooltip on rollovers
                undecorated=False,             # False - no titlebar or buttons
                on_top=True,                   # place window on top of others
                no_buttons=p.args.tailButton,  # no dialog buttons
                button=buttonArg,              # view log btn for each cmd
                separator=' ',                 # separator
            )

        # button = "gtk-close:1",
        # logging.info('Returned='+str(x))
        if x is None:
            exit(0)


#
# this causes program to execute
# and exit cleanly on interrupt
#
if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        exit(1)
