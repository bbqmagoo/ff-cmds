#!/usr/bin/env python3
"""ff-info - text-tty or gui-yad show video file parameters."""
# -*- mode: python -*-
# -*- coding: utf-8 -*-
#
# 2015-04-15 - added Attributes class to hold and control media data
# 2015-08-31 - added title/episode# field 'TTL' to General part of query
# 2016-01-09 - program linted by atom/flake8
# 2016-04-21 - updates for magoo_tools
# 2016-10-29 - changed print & logging statements to ''.format()
# 2016-10-29 - changed YAD button definitions to use ''.format()
#
from sys import argv, exit   # , version_info
import os.path
import argparse
from magoo.logtools import check_logging_args_argparse, logging
from magoo.proctools import os_which, os_getstatusoutput, os_call
from yad import YAD
'''
from sys import version_info
if version_info[0] < 3:
    from string import replace          # deprecated in python 3.0+
'''
# Constants Radix:1024:KB
K = 1024
M = 1024 * K
G = 1024 * M
# Constants Radix:1000:kib
k = 1000
m = 1000 * k
g = 1000 * m

#
# these attribute constants should
# make the code easier to manage
# and store and retrieve values
#
VFN = 0   # video filename
VFS = 1   # Video File Size
TTL = 2   # video showname:episode#
OBR = 3   # Overall Bitrate
NBR = 4   # Nominal Bitrate
VFC = 5   # video File Container
VDR = 6   # Video Duration
VSZ = 7   # Video XY Size
VCD = 8   # Video Codec
VBR = 9   # Video Bitrate
VFR = 10  # Video Frame Rate
VAR = 11  # Video Aspect Ratio
ACD = 12  # Audio Codec
VAF = 13  # Audio Frequency
VSR = 14  # Audio Sample Rate
VAC = 15  # Audio Channels
ASZ = 16  # Audio Stream Size
ASC = 17  # Audio Stream Count


class Program:
    """this class hold common program info for this program."""

    def __init__(self):
        """Store important program info here."""
        self.cmdName = os.path.basename(argv[0])        # save my cmdname
        self.logFile = '/tmp/{}.log'.format(self.cmdName)  # my log fname
        self.defLogLevel = 20                       # default log level (INFO)
        self.version = "v0.4.0"
        self.lastEdit = "2016-10-29"
        self.lintStatus = True
        self.PATH = ':'.join([
            "/home/magoo/.bin",
            "/usr/local/bin",
            "/usr/bin",
            "/bin"])
        self.args = ""                  # command args
        self.largs = ""                 # command args
        self.titleFlag = False
        self.vPlayer = "snappy"         # default player
        self.mediaInfo = ""             # path to mediainfo
        self.images = {                 # usefull icons names
            '0': 'FFmpeg',
            '1': 'pyrenamer',
            '2': 'cabview',
        }


class Attributes:
    """Holds video file attributes as object values."""

    def __init__(self):
        """initialize our video file parameter class."""
        # actual files dictionary of video parameters
        self.vData = {
            VFN: '', VFS: '', OBR: '', NBR: '', VFC: '', VDR: '',
            VSZ: '', VCD: '', VBR: '', VFR: '', VAR: '', ACD: '',
            VAF: '', VSR: '', VAC: '', ASZ: '', TTL: '', ASC: '',
        }
        # dictionary descriptions for data (these don't change)
        self.vDesc = {
            VFN: 'Vid Filename', VFS: 'Video File SZ',
            OBR: 'Overall Bitrate', NBR: 'Nominal Bitrate',
            VFC: 'Container', VDR: 'Vid Duration',
            VSZ: 'Screen Size', VCD: 'Vid Codec',
            VBR: 'Vid Bitrate', VFR: 'Frame Rate',
            VAR: 'Aspect Ratio', ACD: 'Audio Codec',
            VAF: 'Aud Frequency', VSR: 'Sample Rate',
            VAC: 'Aud Channels', ASZ: 'Aud Strm Size',
            TTL: 'Show+Episode', ASC: 'Audio Stream Count',
        }
        self.normalized = False  # normalize flag
        # channels dictionary lookup table
        self.channels = {
            "1": "1-Mono", "2": "2-Stereo", "6": "6-Surround", "": "N/A"
        }
        self.yad = []       # buffer for yad output
        self.pb = []        # print output buffer

        # ? list range instead
    def reset(self):
        """Reset all data fields in class."""
        for i in range(0, len(self.vData)):
            self.vData[i] = ''

    def dump(self):
        """dump/print all data fields in class."""
        for i in range(0, len(self.vData)):
            print((self.vdesc[i] + ' = ' + self.vData[i]))

    def build_yad(self):
        """Build yad data buffer line and append to data buffer."""
        # normalize/beautify data
        self.normalize()
        self.yad = []    # reset yad
        for i in (
            VFN, TTL, VFC, VDR, VSZ, VCD, VBR,
            VFR, VAR, ACD, VAF, VSR, VAC, ASZ
        ):
            if i == VBR or i == VAF or i == VSR:
                # formatted
                data = (self.vDesc[i], '{} Kb'.format(self.vData[i]))
            else:
                data = (self.vDesc[i], self.vData[i])
            self.yad.append(data)
        return(self.yad)

    def oldScreenDisplay(self):
        """Old onscreen display - used notify-send command"""
        sysCmd = '{} -t 12000 \"{}\" \"{}{}{}{}\"'.format(
            os_which('notify-send'),
            v.pb[0],
            v.pb[1],
            v.pb[2],
            v.pb[3],
            v.pb[4])
        logging.debug('{}'.format(sysCmd))
        os_call(sysCmd, shell=True)

    def build_print(self):          # fix this too
        """Build and print data to the console."""
        self.normalize()  # normalize/beautify data
        ln = ('Py3: {}\n'.format(self.vData[VFN]))
        v.pb.append(ln)
        ln = ('{:<15}{}\n{:<15}{}\n{:<15}{}\n'.format(
            '{}: '.format(self.vDesc[TTL]), self.vData[TTL],
            '{}: '.format(self.vDesc[VFC]), self.vData[VFC],
            '{}: '.format(self.vDesc[VDR]), self.vData[VDR]))
        v.pb.append(ln)
        ln = \
            ('{:<15}{}\n{:<15}{}\n{:<15}{} kb/s\n{:<15}{}\n{:<15}{}\n'.format(
                '{}:'.format(self.vDesc[VSZ]), self.vData[VSZ],
                '{}:'.format(self.vDesc[VCD]), self.vData[VCD],
                '{}:'.format(self.vDesc[VBR]), self.vData[VBR],
                '{}:'.format(self.vDesc[VFR]), self.vData[VFR],
                '{}:'.format(self.vDesc[VAR]), self.vData[VAR]))
        v.pb.append(ln)
        ln = \
            ('{:<15}{}\n{:<15}{} khz\n{:<15}{} kb/s\n'.format(
                '{}: '.format(self.vDesc[ACD]), self.vData[ACD],
                '{}: '.format(self.vDesc[VAF]), self.vData[VAF],
                '{}: '.format(self.vDesc[VSR]), self.vData[VSR]))
        v.pb.append(ln)
        ln = \
            ('{:<15}{}\n{:<15}{}\n'.format(
                '{}: '.format(self.vDesc[VAC]), self.vData[VAC],
                '{}: '.format(self.vDesc[ASZ]), self.vData[ASZ]))
        v.pb.append(ln)
        if p.args.notifyFlag:
            self.oldScreenDisplay()
        else:
            print('{}\n{}\n{}\n{}\n{}'.format(
                v.pb[0],
                v.pb[1],
                v.pb[2],
                v.pb[3],
                v.pb[4]))

    def normalize(self):
        """Normalize data values - make em pretty."""
        if self.normalized:
            return
        logging.debug('NominalBitrate={}'.format(self.vData[NBR]))
        if len(self.vData[VBR]) < 1 or len(self.vData[VAF]) < 1:
            if len(self.vData[NBR]) > 3:  # if nominal bitrate - use that
                self.vData[VAF] = int(self.vData[OBR])-int(self.vData[NBR])
                self.vData[VAF] = str(self.vData[VAF])
                self.vData[VBR] = str(self.vData[NBR])
                # tmpOut = ffmpeg_get_bitrates(file)
                # (vData[VBR],vData[VAF]) = tmpOut.split(':')

            # if still bad - brute force
            if len(self.vData[VBR]) < 1 or len(self.vData[VAF]) < 1:
                if len(self.vData[OBR]) < 1:  # brute force again
                    self.vData[OBR] = int(self.vData[VBR]) + 128000

                self.vData[VBR] = int(self.vData[OBR])-128000
                self.vData[VBR] = str(self.vData[VBR])
                self.vData[VAF] = str(128000)
                logging.debug('FIX-BITRATE={}, AFREQ={}'.format(
                    self.vData[VBR], self.vData[VAF]))
        #
        # wierd deal where SRATE and Chanls had extra fields
        #  48000 / 24000 - trim fields after the ' /'
        #
        if len(self.vData[VSR]) > 7 and '/' in self.vData[VSR]:
            self.vData[VSR] = \
                self.vData[VSR][0:str.index(self.vData[VSR], ' /')]
            logging.debug('srate fixed: {}'.format(self.vData[VSR]))
        #
        # lookup the Channels Data from dict table
        #
        if len(self.vData[VAC]) > 7 and '/' in self.vData[VAC]:
            self.vData[VAC] = \
                self.vData[VAC][0:str.index(self.vData[VAC], ' /')]
            logging.debug('audio chanls fixed: {}'.format(self.vData[VAC]))
        self.vData[VAC] = self.channels[self.vData[VAC]]
        #
        # I actually saw a rare occurence of no file duration set anywhere
        # we can use what we know - at 315k video bitrate use 2.885 factor
        # I will mult 2.885 * known vbr and divide by 315k to get duration
        # from - estimated_size mb = ff.duration * 2.885 / 60
        # we get - duration = size mb / 2.885 * 60
        #
        if len(self.vData[VDR]) < 1:
            # figure out factor from BR and 315k
            newFactor = float(int(self.vData[VBR]) * 2.885 / 315000)
            logging.info('VFS={}'.format(self.vData[VFS]))
            # calc Duration
            newDUR = float(int(self.vData[VFS]) / M) / float(newFactor) * 60
            # logging.info('newVDR={}'.format(str(newDUR)))
            #
            # convert the new duration to hh:mm:ss for human readability
            #
            hh = mm = ss = 0                    # zero out
            hh = round((newDUR // 3600))
            mm = round(((newDUR - (hh * 3600)) // 60))
            ss = round(newDUR - (hh * 3600 + mm * 60))
            if hh > 0:                  # format duration and store in array
                # asterisk '*' denotes calulated not mined data
                newDURstr = '{}h {}mn {}s*'.format(hh, mm, ss)
            else:
                newDURstr = '{}mn {}s*'.format(mm, ss)
            self.vData[VDR] = newDURstr
            # logging.info('{}:{}:{}'.format(str(hh), str(mm), str(ss)))
        if not self.vData[VFR]:             # if no frame rate - set default
            self.vData[VFR] = '23.976*'     # most likely 23.976
        #
        # mkv files notoriously bad about making file data available
        # no audio/video stream sizes are found in mkv files
        # dont yet have video stream size - calculate for mkv ?
        #
        if not self.vData[ASZ]:             # if no audio stream size
            # figure out factor from VBR and 315k - factor to figure duration
            newFactor = float(int(self.vData[VBR]) * 2.885 / 315000)
            # figure out duration in seconds from size/M/factor*60
            # calc Duration
            newDUR = float(int(self.vData[VFS]) / M) / float(newFactor) * 60
            # logging.info('vaf={}'.format(str(self.vData[VAF])))
            # logging.info('dur={}'.format(str(newDUR)))
            self.vData[ASZ] = \
                round(calc_audio_size(int(self.vData[VAF]), newDUR))
            self.vData[ASZ] = str(round(self.vData[ASZ] / 1000))+' MiB*'
        #
        # normalize and build my output strings
        # divide by 1000 - knock off 3 digits - add 'k'
        #
        self.vData[VBR] = str(int(self.vData[VBR])/1000)
        self.vData[VBR] = int(float(self.vData[VBR]))
        self.vData[VSR] = str(int(self.vData[VSR])/1000)
        self.vData[VSR] = int(float(self.vData[VSR]))
        self.vData[VAF] = str(int(self.vData[VAF])/1000)
        self.vData[VAF] = int(float(self.vData[VAF]))
        self.normalized = True


# realize my classes
v = Attributes()                # my video attributes storage class
p = Program()


def main():
    """our main function - program executes here."""
    global p
    global v
    # yad = []

    #
    # basic argparse skeleton (customize look of help with custom formatter)
    # web=https://argparse.googlecode.com/svn/trunk/doc/ArgumentParser.html
    #
    parser = argparse.ArgumentParser(
        prog=p.cmdName,
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description='Print video parameters of video file(s)',
        epilog='{} {} {}'.format(p.cmdName, p.version, p.lastEdit)
    )
    parser.add_argument(
        '--logging',
        '-ll',
        required=False,
        type=str,
        default='20',
        metavar='',
        choices=[
            '10', '20', '30', '40', '50',
            'DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL',
            'debug', 'info', 'warning', 'error', 'critical'
        ],
        help='loglevel = DEBUG | INFO | WARNING | ERROR | CRITICAL'
    )
    parser.add_argument(
        '--logfile', '-lf',
        action='store_true',
        required=False,
        help='log to {} instead of the screen'.format(p.logFile)
    )
    parser.add_argument(
        '--osdFlag',
        '-of',
        action='store_true',
        required=False,
        help='osdFlag=OnScreenDisplay with yad'
    )
    parser.add_argument(
        '--notifyFlag',
        '-nf',
        action='store_true',
        required=False,
        help='notifyFlag=OnScreenDisplay with notify-send'
    )
    #
    # split options and non options into args, largs
    # args = parser.parse_args() just parses args - non-args generate an error
    #
    p.args, p.largs = parser.parse_known_args()
    check_logging_args_argparse(p.args, p.logFile)  # get loglvl, init logging

    logging.debug('log level={}'.format(str(p.args.logging)))
    logging.debug('osdFlag={}'.format(('False', 'True')[p.args.osdFlag]))
    logging.debug('logfile={}'.format(('False', 'True')[p.args.logfile]))

    # establish my path
    os.environ['PATH'] = p.PATH
    # myPATH = os.environ['PATH']
    # print(myPATH)

    #
    # no largs (filenames left) after argscan
    # print help and exit
    #
    if not p.largs:
        parser.print_help()
        exit(2)

    # return qualified path/filename for mediainfo
    p.mediaInfo = os_which('mediainfo')

    if 'osd' in p.cmdName:      # set osd output based on command name
        p.args.osdFlag = True
        logging.debug('{}'.format('osdFlag in command name'))
        logging.debug('osdFlag={}'.format(
            ('False', 'True')[p.args.osdFlag]))
        logging.debug('notifyFlag={}'.format(
            ('False', 'True')[p.args.notifyFlag]))
    #
    # process each file
    #
    for file in p.largs:
        # if file and also a video (mp4, mkv, avi ...)
        if 'file://' in file:
            file = file[len('file://'):]
            logging.debug('URI-trim={}'.format(file))
        #
        # if file coming from YAD(DND) as URI - Strip the URI part
        #
        if os.path.isfile(file) and validate_video(file):
            logging.debug('file={}'.format(file))
            # basefile = os.path.basename(file)  # save bname for printing
            #
            # collect the mediainfo DATA from each file (General,Video,Audio)
            #
            # this is tricky - Need \n to seperate General/Audio/Video tracks
            # be sure to get all of the '~' so that we get 15 fields
            #
            myQuery = (
                "General;%FileSize%~%AudioCount%~" +
                "%Title%~%Format%~%OverallBitRate%~%Duration/String2%~\n" +
                "Video;%Width%x%Height%~%BitRate%~%FrameRate%~%Format%~" +
                "%AspectRatio/String%~%BitRate_Nominal%~\nAudio;%BitRate%~" +
                "%SamplingRate%~%Channels%~%Format%~%StreamSize/String2%~")
            """
            #Fields=bobs burgers s01e07.mkv
            # dont forget array index begins at 0
            #01  video file size
            #02  audio stream count
            #03  title
            #04  vformat~Matroska
            #05  obr~
            #06  dur~
            #07  wxh~1280x720
            #08  vbr~442000
            #09  frr~23.976
            #10  aformat~AVC
            #11  asr~16:9
            #12  brn~
            #13  abr~
            #14  asr~48000
            #15  chnnls~2
            #16  aformat~MPEG Audio~
            #17  astrsz~
            """
            #
            # query the file with mediainfo
            # output returned to tmpOut
            #
            sysCmd = '{} --Inform=\"{}\" \"{}\"'.format(
                p.mediaInfo,
                myQuery,
                file
            )
            tmpOut = os_getstatusoutput(sysCmd, status=False).rstrip()
            logging.debug('Fields={}'.format(tmpOut))
            #
            # some files had two audio streams and
            # returned to many fields - trim tmpOut
            # to correct the problem
            #
            # not sure if this is still valid - needs more testing
            #   maybe we need to cut instead of just trimming off 11-08-2015
            #   I also added the AudioCount field - should = 1
            #   if > 1 would indicate more than 1 audiostream in file
            # the offending field may need to be moved to the end of the query
            #
            audioStrCnt = getField(tmpOut, 1)  # get audioStreamCnt from list
            logging.debug('audioStrCnt={}'.format(str(audioStrCnt)))
            logging.debug('#fields={}'.format(str(tmpOut.count('~'))))

            if int(audioStrCnt) > 1:                # extra audio data in list
                tmpOut = getField(tmpOut, 0, 17)            # get trimmed list
                logging.debug('#fields={}'.format(str(tmpOut.count('~'))))
            else:
                # tmpOut = tmpOut.rstrip('~')  # trim extra '~' from list
                #
                # was using rstrip - was trimming multiple
                # '~' if no data was present between them
                # switched to slice - just the last char
                # maybe check first to verify that is '~'
                #
                tmpOut = tmpOut[:-1]           # trim 1 '~' from end of list
            logging.debug('Fields={}'.format(tmpOut))

            if '/' in file:                     # directory name prepended
                fpath = file                    # save all
                file = os.path.basename(file)   # keep filename for display
                fpath = fpath.replace(file, '')  # remember path
                fpath = fpath.rstrip('/')       # strip trailing /
            else:
                fpath = os.getcwd()
            #
            # split/assign values to meaningfully named variables
            #
            v.reset()                           # refresh the class data
            v.vData[VFN] = file
            # now getting filesize from mediainfo
            # was get size of file '{:d}'.format(v.vData[VFR]),
            (
                v.vData[VFS], v.vData[ASC], v.vData[TTL],
                v.vData[VFC], v.vData[OBR], v.vData[VDR],
                v.vData[VSZ], v.vData[VBR], v.vData[VFR],
                v.vData[VCD], v.vData[VAR], v.vData[NBR],
                v.vData[VAF], v.vData[VSR], v.vData[VAC],
                v.vData[ACD], v.vData[ASZ]
            ) = tmpOut.split('~')

            if len(v.vData[TTL]) < 2:           # no title - set to none
                v.vData[TTL] = 'None'
            else:
                v.vData[TTL] = stringClean(v.vData[TTL])  # sanitize title

            # if more than 1 file - reset normalized flag
            logging.debug('#largs={}'.format(str(len(p.largs))))
            if len(p.largs) > 1:
                v.normalized = False        # set normalize/beautify flag

            if p.args.osdFlag is not True:
                #
                # send it to the terminal
                #
                v.build_print()
            else:
                #
                # on screen with pyYad (was notify-send)
                #
                yad = v.build_yad()
                yadTitle = '{}'.format(p.cmdName)
                buttonClose = '{}!{}!{}:{}'.format(
                    'Close Window',                 # button label
                    'gtk-quit',                     # button icon
                    'Close window',                 # tooltip
                    '0')                            # exit code
                buttonPlay = '{}!{}!{}:{}'.format(
                    'Play Video',                       # button label
                    p.vPlayer,                          # button icon
                    'Play with {}'.format(p.vPlayer),   # tooltip
                    'nohup {} {}'.format(
                        os_which(p.vPlayer),            # command
                        '\"{}/{}\"'.format(
                            fpath, file)))              # path/file

                YAD().List(colnames=(
                    ("Field", "TEXT"),
                    ("Value", "TEXT")),
                    quoted=True,
                    ontop=True,
                    geometry="280x440-50+50",
                    title=yadTitle,
                    separator="",
                    image='cabview',
                    window_icon=p.images.get('2', ""),  # cabview icon
                    button1=buttonPlay,
                    button0=buttonClose,
                    undecorated=False,
                    timeout=15,
                    timeout_indicator='top',
                    data=yad,
                    # ellipsize='middle',       #  display Tex...t - expandable
                    # expander='ExpandMe',      # works here
                )
        # end of is file and valid video file
    # end of the for each file loop
# endof __MAIN__


def calc_audio_size(audio_bitrate, time):
    """input a-bitrate, time -> return (a_bitrate * 1000 / 8) * time."""
    return ((audio_bitrate * 1000 / 8) * (float(time) / M))


def getField(listIn, f, n=1):
    """return some fields from a previous mediainfo request."""
    '''
    getField(listIn, f, n=1)

    args:
        listIn = ~seperated list
        f = field number
        n = 1 or if > 1 = number of fields range (f - n)

        return field f from listIn (~ seperated data)
        if n > 1 - return str(list[f:n]) fields
    '''
    fBuf = []

    fBuf = listIn.split('~')                # split into field data
    if n == 1:
        return(fBuf[f])                     # return particular field
    else:                                   # returning list of f -> n fields
        listOut = '~'.join([str(x) for x in fBuf[f:n]])  # trim the list
        return(listOut)


def validate_video(fileIn):
    """Validate a file against a dict of extents, good return(True)."""
    Extents = {
        ".mp4": True, ".mkv": True, ".avi": True,
        ".ogg": True, ".m4v": True, ".mov": True,
        ".flv": True, ".wmv": True, ".vob": True,
        ".mpg": True, ".ts": True,
    }
    (fileIn_base, fileIn_ext) = os.path.splitext(fileIn)
    return(Extents.get(fileIn_ext, False))      # def=False, good lookup=True


def find_ch_offsets(ch, strIn):
    """return list of offsets of all occurences of ch in string_in."""
    pos = []

    for i in range(len(strIn)):                 # for all chars in string
        if ch == strIn[i]:                      # if = ch
            pos.append(i)                   # append the index offset to list

        return(pos)


def stringClean(strIn):
    """Clean unwanted chars from a string."""
    #
    # use translate - more pythonic
    #
    chg__in = "(){} *.&"        # chg these
    chg_out = "[][]___+"        # to these
    lose_em = " ',!;~"          # lose these
    trans = str.maketrans(chg__in, chg_out, lose_em)
    return (strIn.translate(trans))


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        exit(1)
