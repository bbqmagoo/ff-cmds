#!/usr/bin/env bash
# -*- coding: utf-8 -*-
# -*- mode: sh -*-
# execute snappy with last arg (ff-size filename)
# called on double-click of line from ff-size
# filename is the last column of the 8 columns
# first arg incoming is command to execute
# shift it off.  Snappy may contain a file path
#
# also called by ff-find with xdg-open and
# using the first argument from incoming (09-09-2016)
# modified code use logging, removed debug (09-21-2016)
# passed shellcheck lint.
#
FALSE=0
TRUE=1
_TOSCRN_=$TRUE          # flip statement to start logging
_TOSCRN_=$FALSE
_TOFILE_=$TRUE
_TOFILE_=$FALSE
#_TOPOPUP_=$FALSE
# logging output to screen and logfile
# based on _TOSCRN_ and/or _TOFILE_
# being TRUE or FALSE
#_STDERR_=/dev/fd/1
_STDOUT_=/dev/fd/2
_STDOUT_=/dev/pts/1
IFS=$' \t\n'                    # Default IFS=<space><newline><tab>
cmdName=$(basename "$0")
logFile="/tmp/${cmdName}.log"
# Version: 0.1.3
# LastEdit: 2016-09-29  (magoo)

#
# logging output to screen and logfile
# based on _TOSCRN_ and/or _TOFILE_
# being TRUE or FALSE
#
function logging()
{
  set +o errexit
  ((_TOSCRN_)) || ((_TOFILE_)) && _DS_=$(date +"%H:%M:%S")
  ((_TOSCRN_)) || ((_TOFILE_)) && _INFO_="FN=${FUNCNAME[1]},LN=${BASH_LINENO[0]}"
  ((_TOSCRN_)) && echo -e "[${_DS_}]-${_INFO_}}-$*" > "${_STDOUT_}"
  ((_TOSCRN_)) && echo -e "[${_DS_}]-${_INFO_}}-$*" >> "${logFile}"
  set -o errexit
}

#
# main()
#
set -o errexit                                          # exit on error
set -o nounset                                          # no empty vars
set -o pipefail                                         # fail pipe-errs
#
# if done logging then
# if logfile exists - rm
#
if ! ((_TOFILE_)); then
  if [[ -e "${logFile}" ]]; then    # not debug and logfile - delete log
    /bin/rm -f "${logFile}"
  fi
fi

logging "In=${*}"                   # show CLI Args in
dCmd="${1}"; shift                  # assign to dCmd and shift
logging "dCmd=$dCmd"
if [[ ${dCmd} =~ snappy ]]; then	# if snappy is command
  tmpCmd="${dCmd}"                  # save this
  if [[ ${tmpCmd} =~ : ]]; then     # dpath is also part of dCmd
    dCmd="${tmpCmd%:*}"             # front=dCmd
    dCmd=$(which "${dCmd}")         # get full path
    logging "dCmd=$dCmd"
    dPath="${tmpCmd#*:}"            # back=dPath
    logging "dPath=${dPath}"
    dArg="file://${dPath}/${*: -1}" # path/file = full URI (was @)
    logging "dArg=${dArg}"
  else
    dArg="${*: -1}"                 # last name in list is video (was @)
    logging "dArg=${dArg}"
  fi
else								# first name is file
  dArg="${1}"
fi
logging "${dCmd} ${dArg}"
${dCmd} "${dArg}"                   # execute command with correct arg
