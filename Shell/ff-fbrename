#!/usr/bin/env bash
#
# from drag and drop or command line
# Query with filebot CLI to rename file
#
# files format are: <showname>_S<season>E<episode>.<ext>
#   as returned by ff-rename -s
#
# FileBot CLI
#   http://www.filebot.net/cli.html
#
# Scripts and Automation
#   http://www.filebot.net/script.html
#
# Format Expressions
#   http://www.filebot.net/naming.html
#
# omdbapi.com
#   http://www.omdbapi.com/?t=Dice&y=2016&plot=short&r=json
# returns info including link for poster art
#   http://www.omdbapi.com/?t=Dice&y=2016&Season=1
# returns season title info
#    http://www.omdbapi.com/?t=Dice&year=2016&Season=1&Episode=1
# returns just episode 1
#
# defines
FALSE=0
TRUE=1
_TOSCRN_=$FALSE
_TOSCRN_=$TRUE
_TOFILE_=$TRUE
_TOFILE_=$FALSE
_TOPOPUP_=$FALSE
_TOPOPUP_=$TRUE
# logging output to screen and logfile
# based on _TOSCRN_ and/or _TOFILE_
# being TRUE or FALSE
_STDERR_="/dev/fd/1"
_STDOUT_="/dev/fd/2"
cmdName="$(basename "${0}")"
logFile="/tmp/${cmdName}.log"
_ACTION_="test"
_SHOW_=""

# filebot constants
DB="TheTVDB"
# ADB="tvMaze"        # alternate DB
#
# original format from fb internal
# {S00E00}_{t.replaceAll(/[:!?.,'()]+$/)replaceAll(/&/, "and")replaceAll(/[ ]/, "_") \
# .lowerTrail().replaceAll(/[:.,?'()`´‘’ʻ]/, "").lowerTrail().replacePart('_$1')}
#
# space(replacement)
# replaceAll(pattern, replacement = "")
# replacePart(replacement = "")
# upperInitial()
# lowerTrail()
FMT="{S00E00}_\
{t.space('_')\
.replaceAll(/&/,'and')\
.replacePart('_$1')\
.replaceAll(/[:.,?\'()\`´‘’ʻ]/)\
.replaceTrailingBrackets('')\
.lowerTrail()}"

#
# logging output to screen and logfile
# based on _TOSCRN_ and/or _TOFILE_
# being TRUE or FALSE
#
function logging()
{
  set +o errexit
  ((_TOSCRN_)) || ((_TOFILE_)) && _DS_=$(date +"%H:%M:%S")
  ((_TOSCRN_)) || ((_TOFILE_)) && _INFO_="FN=${FUNCNAME[1]},LN=${BASH_LINENO[0]}"
  ((_TOSCRN_)) && echo -e "[${_DS_}]-${_INFO_}}-$*" > "${_STDOUT_}"
  ((_TOFILE_)) && echo -e "[${_DS_}]-${_INFO_}}-$*" >> "${logFile}"
  set -o errexit
}

#
# display gui popup message on users screen
# based on _TOPOPUP_ being TRUE to work
#
function notify()
{
  local ET=5000         # default expire time

  if [[ $# -gt 1 ]]; then
    ET=${1};
    shift
  fi
  set +o errexit;
  ((_TOPOPUP_)) && _DS_=$(date +"%H:%M:%S")
  ((_TOPOPUP_)) && notify-send --expire-time=$ET "[${_DS_}]-$*"
  set -o errexit;
}

#
# findFP{} - split path/filename.ext into logical parts
# args:
#   $1 = path/filename.ext
#
# set $fp to full filename string
# Result: this command seperates them into logical parts
#   $fn = filename
#   $fnr = filename root
#   $fnp = filename path
#   $ext = filename ext (including .)
#
# http://www.thegeekstuff.com/2010/07/bash-string-manipulation/
#   bash string functions information
#
function findFP()
{
  local spc=' '     # ' ' for match
  local dsh='-'     # '-' single dash
  local dot='.'     # '.' for match
  local fp="$1"     # incoming fpath/fname.ext
  local fnr         # fname-root (0)
  local ext         # fname-ext (1)
  local fnp         # fname-path (2)
  local fn          # orig fname (3)
  local dp          # BASH_REMATCH (4)

  #
  # if filename.ext includes spaces
  # change ' ' to '-' and rename file
  # so that everything won't blow-up
  #
  if [[ "${fp}" =~ ${spc} && "${fp}" =~ ${dot} ]]; then
    if [[ -e "${fp}" ]]; then
      new=${fp//spc/$dsh}                # change all ' ' to '-'
      #new="$(echo "${fp}"|sed -e 's/ /-/g')"
      /bin/mv "${fp}" "${new}"
      logging "${fp} changed to ${new}"
      fp="${new}"          # $fp is changed to new
    fi
  fi

  #
  # split path/filename.ext into its corresponding parts
  #
  [[ $fp =~ ^(.*/)?(.+)?$ ]] && { dp=${BASH_REMATCH[1]}; fn=${BASH_REMATCH[2]};
  ext=$([[ $fn = *.* ]] && printf %s ".${fn##*.}" || printf '');
  [[ $fn == "$ext" ]] && { fnr=$fn; ext=''; } || fnr=${fn:0:$((${#fn}-${#ext}))}; }
  fnp=$(dirname "$fp"); dp=${dp}    # stop shellcheck from bitchin'

  #       0      1      2     3
  nP=( ${fnr} ${ext} ${fnp} ${fn} )       # dp is usually dir path
  echo "${nP[@]}"                         # return parts values to caller
  return
}

#
# bash version of python/perl die()
# Print an error message and exit with given status
# call as: die status "message" ["message" ...]
# https://www.dartmouth.edu/~rc/classes/ksh/print_pages.shtml
# https://stackoverflow.com/questions/7868818/in-bash-is-there-an-equivalent-of-die-error-msg
#
function die()
{
  local exitStatus=${1}; shift
  echo -e "${BASH_SOURCE[1]} Died at ${BASH_LINENO[0]} in ${FUNCNAME[1]}()" > \
    "${_STDERR_}"
  for i in "$@";
  do
    echo -e "${i}" > "${_STDERR_}"
  done
  exit "${exitStatus}"
}

#
# Usage
#
function Usage()
{
cat <<EOF

  Lookup TV file episode and rename with filebot

  Usage: ${cmdName} [flags] <TV video file>
  flags:
    -d)ebug (debugging enabled)
    -c)opy (rename action: copy)
    -m)ove (rename action: move)
    -t)est (rename action: test (default))
    -s)how (include showname)
    -h)elp (show help info)
EOF
  exit 1
}

#
# main()
#
set -o errexit                                          # exit on error
set -o nounset                                          # no empty vars
set -o pipefail                                         # fail pipe-errs

while getopts "dcmsth" opt
do
  case ${opt} in
    d)
      _TOSCRN_="$TRUE"
    ;;
    c)
      _ACTION_="copy"
    ;;
    m)
      _ACTION_="move"
    ;;
    t)
      _ACTION_="test"
    ;;
    s)
      # add name of show to front of Format ($FMT)
      _SHOW_="{n.space('_').replaceAll(/&/,'and').replaceAll(/[:.,?\'()\`´‘’ʻ]/)}"
      FMT="${_SHOW_}_${FMT}"
    ;;
    \?|h)
      Usage
    ;;
  esac
done
shift $((OPTIND - 1))

# lookin for just 1 arg
if [[ "$#" -ne "1" ]]; then
  Usage
fi

# strip file:// if passed a DnD URI
#
EP="${1}"                                     # episode name
if [[ "${EP}" =~ file:// ]]; then
  #EP=$(echo ${EP#file://})		# strip URI if found from arg[1]
  EP=$("${EP#file://}")		    # strip URI if found from arg[1]
  #logging "$EP"
fi

# File not found - exit
if [[ ! -e "${1}" ]]; then
  die 1 \
    "" \
    "Error: File ${1} not found" \
    ""
  exit 1
fi

read -r fnr ext fnp fn <<< "$(findFP "${1}")"
#findFileParts "$EP"                 # split filename into parts

#
# cd to directory of file if different
#
if [[ "${fnp}" != "." ]]; then
  cd "${fnp}" || die 1 "Error: Could not cd into ${fnp}"
fi

# Figure stuff out from given filename
EP="${fn}"                                    # filename
SQ=${EP%_S[0-9][0-9]E[0-9][0-9].*}          # the tv show name
SQSP=$(echo "${SQ}"|tr '_' ' ')             # with spaces for fb query
logging "Show Query = ${SQ}"
SEL=${EP#${SQ}_*}                           # sxxexx.ext
logging "SE-EP = ${SEL}"

# format to two places - with leading zereoes
S=$(echo "${SEL:1:2}"|awk '{$0=int($0)}1')  # Season # - no leading zeroes
E=$(echo "${SEL:4:5}"|awk '{$0=int($0)}1')  # Episode # - no leading zeroes

logging "${S}x${E}"

# filter spec (S# && E#)
FLT="s == ${S} && e == ${E}"

#
# run filebot command and rename file
# fetches all episodes, filter for ours
#
# --log (all, fine, info, warning, off)
#
# --action (test | move | copy | keeplink | symlink | hardlink)
#
logging "FORMAT=filebot -rename ${EP} -non-strict --log info -q ${SQSP}"
logging " --db ${DB} --filter ${FLT} --format ${FMT} --action ${_ACTION_}"

status=$(filebot \
  -rename "${EP}" \
  -non-strict \
  --log info \
  --q "${SQSP}" \
  --db "${DB}" \
  --filter "${FLT}" \
  --format "${FMT}" \
  --action "${_ACTION_}")

# blab about it
notify 5000 "$status"
# echo "$status"
